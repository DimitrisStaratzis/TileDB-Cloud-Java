/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import io.tiledb.cloud.rest_api.JSON;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

/**
 * Encapsulates information regarding inviting people using email to share array, same permissions for all invitees
 */
@ApiModel(description = "Encapsulates information regarding inviting people using email to share array, same permissions for all invitees")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-14T18:46:41.869452+03:00[Europe/Athens]")
public class InvitationArrayShareEmail {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<ArrayActions> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVITEE_EMAIL = "invitee_email";
  @SerializedName(SERIALIZED_NAME_INVITEE_EMAIL)
  private List<String> inviteeEmail = new ArrayList<>();

  public InvitationArrayShareEmail() { 
  }

  public InvitationArrayShareEmail actions(List<ArrayActions> actions) {
    
    this.actions = actions;
    return this;
  }

  public InvitationArrayShareEmail addActionsItem(ArrayActions actionsItem) {
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * List of permitted actions
   * @return actions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[read, write]", required = true, value = "List of permitted actions")

  public List<ArrayActions> getActions() {
    return actions;
  }


  public void setActions(List<ArrayActions> actions) {
    this.actions = actions;
  }


  public InvitationArrayShareEmail inviteeEmail(List<String> inviteeEmail) {
    
    this.inviteeEmail = inviteeEmail;
    return this;
  }

  public InvitationArrayShareEmail addInviteeEmailItem(String inviteeEmailItem) {
    this.inviteeEmail.add(inviteeEmailItem);
    return this;
  }

   /**
   * Get inviteeEmail
   * @return inviteeEmail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getInviteeEmail() {
    return inviteeEmail;
  }


  public void setInviteeEmail(List<String> inviteeEmail) {
    this.inviteeEmail = inviteeEmail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvitationArrayShareEmail invitationArrayShareEmail = (InvitationArrayShareEmail) o;
    return Objects.equals(this.actions, invitationArrayShareEmail.actions) &&
        Objects.equals(this.inviteeEmail, invitationArrayShareEmail.inviteeEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, inviteeEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvitationArrayShareEmail {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    inviteeEmail: ").append(toIndentedString(inviteeEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("invitee_email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("actions");
    openapiRequiredFields.add("invitee_email");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InvitationArrayShareEmail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (InvitationArrayShareEmail.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvitationArrayShareEmail is not found in the empty JSON string", InvitationArrayShareEmail.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
//      for (Entry<String, JsonElement> entry : entries) {
//        if (!InvitationArrayShareEmail.openapiFields.contains(entry.getKey())) {
//          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvitationArrayShareEmail` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
//        }
//      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InvitationArrayShareEmail.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("invitee_email") != null && !jsonObj.get("invitee_email").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitee_email` to be an array in the JSON string but got `%s`", jsonObj.get("invitee_email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvitationArrayShareEmail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvitationArrayShareEmail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvitationArrayShareEmail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvitationArrayShareEmail.class));

       return (TypeAdapter<T>) new TypeAdapter<InvitationArrayShareEmail>() {
           @Override
           public void write(JsonWriter out, InvitationArrayShareEmail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvitationArrayShareEmail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InvitationArrayShareEmail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InvitationArrayShareEmail
  * @throws IOException if the JSON string is invalid with respect to InvitationArrayShareEmail
  */
  public static InvitationArrayShareEmail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvitationArrayShareEmail.class);
  }

 /**
  * Convert an instance of InvitationArrayShareEmail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

