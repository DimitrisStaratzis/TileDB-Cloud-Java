/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ArrayActivityLog;
import org.openapitools.client.model.ArrayInfo;
import org.openapitools.client.model.ArrayTaskStatus;
import org.openapitools.client.model.ArrayTaskType;
import org.openapitools.client.model.DomainArray;
import org.openapitools.client.model.Querytype;
import org.openapitools.client.model.ResultFormat;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Synchronous Task to Run
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-21T11:51:21.275554462Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class ArrayTask {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  @javax.annotation.Nullable
  private String username;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_ARRAY_METADATA = "array_metadata";
  @SerializedName(SERIALIZED_NAME_ARRAY_METADATA)
  @javax.annotation.Nullable
  private ArrayInfo arrayMetadata;

  public static final String SERIALIZED_NAME_SUBARRAY = "subarray";
  @SerializedName(SERIALIZED_NAME_SUBARRAY)
  @javax.annotation.Nullable
  private DomainArray subarray;

  public static final String SERIALIZED_NAME_MEMORY = "memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  @javax.annotation.Nullable
  private Integer memory;

  public static final String SERIALIZED_NAME_CPU = "cpu";
  @SerializedName(SERIALIZED_NAME_CPU)
  @javax.annotation.Nullable
  private Integer cpu;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  @javax.annotation.Nullable
  private String namespace;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private ArrayTaskStatus status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "status_message";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  @javax.annotation.Nullable
  private String statusMessage;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_FINISH_TIME = "finish_time";
  @SerializedName(SERIALIZED_NAME_FINISH_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime finishTime;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  @javax.annotation.Nullable
  private Double cost;

  public static final String SERIALIZED_NAME_EGRESS_COST = "egress_cost";
  @SerializedName(SERIALIZED_NAME_EGRESS_COST)
  @javax.annotation.Nullable
  private Double egressCost;

  public static final String SERIALIZED_NAME_ACCESS_COST = "access_cost";
  @SerializedName(SERIALIZED_NAME_ACCESS_COST)
  @javax.annotation.Nullable
  private Double accessCost;

  public static final String SERIALIZED_NAME_QUERY_TYPE = "query_type";
  @SerializedName(SERIALIZED_NAME_QUERY_TYPE)
  @javax.annotation.Nullable
  private Querytype queryType;

  public static final String SERIALIZED_NAME_UDF_CODE = "udf_code";
  @SerializedName(SERIALIZED_NAME_UDF_CODE)
  @javax.annotation.Nullable
  private String udfCode;

  public static final String SERIALIZED_NAME_UDF_LANGUAGE = "udf_language";
  @SerializedName(SERIALIZED_NAME_UDF_LANGUAGE)
  @javax.annotation.Nullable
  private String udfLanguage;

  public static final String SERIALIZED_NAME_SQL_QUERY = "sql_query";
  @SerializedName(SERIALIZED_NAME_SQL_QUERY)
  @javax.annotation.Nullable
  private String sqlQuery;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private ArrayTaskType type;

  public static final String SERIALIZED_NAME_ACTIVITY = "activity";
  @SerializedName(SERIALIZED_NAME_ACTIVITY)
  @javax.annotation.Nullable
  private List<ArrayActivityLog> activity = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGS = "logs";
  @SerializedName(SERIALIZED_NAME_LOGS)
  @javax.annotation.Nullable
  private String logs;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  @javax.annotation.Nullable
  private BigDecimal duration;

  public static final String SERIALIZED_NAME_SQL_INIT_COMMANDS = "sql_init_commands";
  @SerializedName(SERIALIZED_NAME_SQL_INIT_COMMANDS)
  @javax.annotation.Nullable
  private List<String> sqlInitCommands = new ArrayList<>();

  public static final String SERIALIZED_NAME_SQL_PARAMETERS = "sql_parameters";
  @SerializedName(SERIALIZED_NAME_SQL_PARAMETERS)
  @javax.annotation.Nullable
  private List<Object> sqlParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULT_FORMAT = "result_format";
  @SerializedName(SERIALIZED_NAME_RESULT_FORMAT)
  @javax.annotation.Nullable
  private ResultFormat resultFormat;

  public static final String SERIALIZED_NAME_TASK_GRAPH_UUID = "task_graph_uuid";
  @SerializedName(SERIALIZED_NAME_TASK_GRAPH_UUID)
  @javax.annotation.Nullable
  private String taskGraphUuid;

  public static final String SERIALIZED_NAME_CLIENT_NODE_UUID = "client_node_uuid";
  @SerializedName(SERIALIZED_NAME_CLIENT_NODE_UUID)
  @javax.annotation.Nullable
  private String clientNodeUuid;

  public static final String SERIALIZED_NAME_CLOUD_PROVIDER = "cloud_provider";
  @SerializedName(SERIALIZED_NAME_CLOUD_PROVIDER)
  @javax.annotation.Nullable
  private String cloudProvider;

  public static final String SERIALIZED_NAME_CLOUD_REGION = "cloud_region";
  @SerializedName(SERIALIZED_NAME_CLOUD_REGION)
  @javax.annotation.Nullable
  private String cloudRegion;

  public ArrayTask() {
  }

  public ArrayTask id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * task ID
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public ArrayTask name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional task name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public ArrayTask username(@javax.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  /**
   * username that executed this task
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }


  public ArrayTask description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional task description (Tasks purpose)
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public ArrayTask arrayMetadata(@javax.annotation.Nullable ArrayInfo arrayMetadata) {
    this.arrayMetadata = arrayMetadata;
    return this;
  }

  /**
   * Get arrayMetadata
   * @return arrayMetadata
   */
  @javax.annotation.Nullable
  public ArrayInfo getArrayMetadata() {
    return arrayMetadata;
  }

  public void setArrayMetadata(@javax.annotation.Nullable ArrayInfo arrayMetadata) {
    this.arrayMetadata = arrayMetadata;
  }


  public ArrayTask subarray(@javax.annotation.Nullable DomainArray subarray) {
    this.subarray = subarray;
    return this;
  }

  /**
   * Get subarray
   * @return subarray
   */
  @javax.annotation.Nullable
  public DomainArray getSubarray() {
    return subarray;
  }

  public void setSubarray(@javax.annotation.Nullable DomainArray subarray) {
    this.subarray = subarray;
  }


  public ArrayTask memory(@javax.annotation.Nullable Integer memory) {
    this.memory = memory;
    return this;
  }

  /**
   * memory allocated to task in bytes
   * @return memory
   */
  @javax.annotation.Nullable
  public Integer getMemory() {
    return memory;
  }

  public void setMemory(@javax.annotation.Nullable Integer memory) {
    this.memory = memory;
  }


  public ArrayTask cpu(@javax.annotation.Nullable Integer cpu) {
    this.cpu = cpu;
    return this;
  }

  /**
   * millicpu allocated to task
   * @return cpu
   */
  @javax.annotation.Nullable
  public Integer getCpu() {
    return cpu;
  }

  public void setCpu(@javax.annotation.Nullable Integer cpu) {
    this.cpu = cpu;
  }


  public ArrayTask namespace(@javax.annotation.Nullable String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * namespace task is tied to
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(@javax.annotation.Nullable String namespace) {
    this.namespace = namespace;
  }


  public ArrayTask status(@javax.annotation.Nullable ArrayTaskStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ArrayTaskStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable ArrayTaskStatus status) {
    this.status = status;
  }


  public ArrayTask statusMessage(@javax.annotation.Nullable String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * The reason the array task status is in the state
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(@javax.annotation.Nullable String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public ArrayTask startTime(@javax.annotation.Nullable OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time RFC3339 for job
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(@javax.annotation.Nullable OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public ArrayTask finishTime(@javax.annotation.Nullable OffsetDateTime finishTime) {
    this.finishTime = finishTime;
    return this;
  }

  /**
   * Finish time RFC3339 for job
   * @return finishTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFinishTime() {
    return finishTime;
  }

  public void setFinishTime(@javax.annotation.Nullable OffsetDateTime finishTime) {
    this.finishTime = finishTime;
  }


  public ArrayTask cost(@javax.annotation.Nullable Double cost) {
    this.cost = cost;
    return this;
  }

  /**
   * Total accumulated for task in USD, example is $0.12
   * @return cost
   */
  @javax.annotation.Nullable
  public Double getCost() {
    return cost;
  }

  public void setCost(@javax.annotation.Nullable Double cost) {
    this.cost = cost;
  }


  public ArrayTask egressCost(@javax.annotation.Nullable Double egressCost) {
    this.egressCost = egressCost;
    return this;
  }

  /**
   * Total accumulated for egress task in USD, example is $0.12
   * @return egressCost
   */
  @javax.annotation.Nullable
  public Double getEgressCost() {
    return egressCost;
  }

  public void setEgressCost(@javax.annotation.Nullable Double egressCost) {
    this.egressCost = egressCost;
  }


  public ArrayTask accessCost(@javax.annotation.Nullable Double accessCost) {
    this.accessCost = accessCost;
    return this;
  }

  /**
   * Cost accumulated for access task in USD, example is $0.12
   * @return accessCost
   */
  @javax.annotation.Nullable
  public Double getAccessCost() {
    return accessCost;
  }

  public void setAccessCost(@javax.annotation.Nullable Double accessCost) {
    this.accessCost = accessCost;
  }


  public ArrayTask queryType(@javax.annotation.Nullable Querytype queryType) {
    this.queryType = queryType;
    return this;
  }

  /**
   * Get queryType
   * @return queryType
   */
  @javax.annotation.Nullable
  public Querytype getQueryType() {
    return queryType;
  }

  public void setQueryType(@javax.annotation.Nullable Querytype queryType) {
    this.queryType = queryType;
  }


  public ArrayTask udfCode(@javax.annotation.Nullable String udfCode) {
    this.udfCode = udfCode;
    return this;
  }

  /**
   * Optional actual code that is going to be executed
   * @return udfCode
   */
  @javax.annotation.Nullable
  public String getUdfCode() {
    return udfCode;
  }

  public void setUdfCode(@javax.annotation.Nullable String udfCode) {
    this.udfCode = udfCode;
  }


  public ArrayTask udfLanguage(@javax.annotation.Nullable String udfLanguage) {
    this.udfLanguage = udfLanguage;
    return this;
  }

  /**
   * Optional actual language used to express udf_code
   * @return udfLanguage
   */
  @javax.annotation.Nullable
  public String getUdfLanguage() {
    return udfLanguage;
  }

  public void setUdfLanguage(@javax.annotation.Nullable String udfLanguage) {
    this.udfLanguage = udfLanguage;
  }


  public ArrayTask sqlQuery(@javax.annotation.Nullable String sqlQuery) {
    this.sqlQuery = sqlQuery;
    return this;
  }

  /**
   * Optional actual sql query that is going to be executed
   * @return sqlQuery
   */
  @javax.annotation.Nullable
  public String getSqlQuery() {
    return sqlQuery;
  }

  public void setSqlQuery(@javax.annotation.Nullable String sqlQuery) {
    this.sqlQuery = sqlQuery;
  }


  public ArrayTask type(@javax.annotation.Nullable ArrayTaskType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ArrayTaskType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable ArrayTaskType type) {
    this.type = type;
  }


  public ArrayTask activity(@javax.annotation.Nullable List<ArrayActivityLog> activity) {
    this.activity = activity;
    return this;
  }

  public ArrayTask addActivityItem(ArrayActivityLog activityItem) {
    if (this.activity == null) {
      this.activity = new ArrayList<>();
    }
    this.activity.add(activityItem);
    return this;
  }

  /**
   * Array activity logs for task
   * @return activity
   */
  @javax.annotation.Nullable
  public List<ArrayActivityLog> getActivity() {
    return activity;
  }

  public void setActivity(@javax.annotation.Nullable List<ArrayActivityLog> activity) {
    this.activity = activity;
  }


  public ArrayTask logs(@javax.annotation.Nullable String logs) {
    this.logs = logs;
    return this;
  }

  /**
   * logs from array task
   * @return logs
   */
  @javax.annotation.Nullable
  public String getLogs() {
    return logs;
  }

  public void setLogs(@javax.annotation.Nullable String logs) {
    this.logs = logs;
  }


  public ArrayTask duration(@javax.annotation.Nullable BigDecimal duration) {
    this.duration = duration;
    return this;
  }

  /**
   * duration in nanoseconds of an array task
   * @return duration
   */
  @javax.annotation.Nullable
  public BigDecimal getDuration() {
    return duration;
  }

  public void setDuration(@javax.annotation.Nullable BigDecimal duration) {
    this.duration = duration;
  }


  public ArrayTask sqlInitCommands(@javax.annotation.Nullable List<String> sqlInitCommands) {
    this.sqlInitCommands = sqlInitCommands;
    return this;
  }

  public ArrayTask addSqlInitCommandsItem(String sqlInitCommandsItem) {
    if (this.sqlInitCommands == null) {
      this.sqlInitCommands = new ArrayList<>();
    }
    this.sqlInitCommands.add(sqlInitCommandsItem);
    return this;
  }

  /**
   * SQL queries or commands to run before main sql query
   * @return sqlInitCommands
   */
  @javax.annotation.Nullable
  public List<String> getSqlInitCommands() {
    return sqlInitCommands;
  }

  public void setSqlInitCommands(@javax.annotation.Nullable List<String> sqlInitCommands) {
    this.sqlInitCommands = sqlInitCommands;
  }


  public ArrayTask sqlParameters(@javax.annotation.Nullable List<Object> sqlParameters) {
    this.sqlParameters = sqlParameters;
    return this;
  }

  public ArrayTask addSqlParametersItem(Object sqlParametersItem) {
    if (this.sqlParameters == null) {
      this.sqlParameters = new ArrayList<>();
    }
    this.sqlParameters.add(sqlParametersItem);
    return this;
  }

  /**
   * SQL query parameters
   * @return sqlParameters
   */
  @javax.annotation.Nullable
  public List<Object> getSqlParameters() {
    return sqlParameters;
  }

  public void setSqlParameters(@javax.annotation.Nullable List<Object> sqlParameters) {
    this.sqlParameters = sqlParameters;
  }


  public ArrayTask resultFormat(@javax.annotation.Nullable ResultFormat resultFormat) {
    this.resultFormat = resultFormat;
    return this;
  }

  /**
   * Get resultFormat
   * @return resultFormat
   */
  @javax.annotation.Nullable
  public ResultFormat getResultFormat() {
    return resultFormat;
  }

  public void setResultFormat(@javax.annotation.Nullable ResultFormat resultFormat) {
    this.resultFormat = resultFormat;
  }


  public ArrayTask taskGraphUuid(@javax.annotation.Nullable String taskGraphUuid) {
    this.taskGraphUuid = taskGraphUuid;
    return this;
  }

  /**
   * If set, the ID of the log for the task graph that this was part of. 
   * @return taskGraphUuid
   */
  @javax.annotation.Nullable
  public String getTaskGraphUuid() {
    return taskGraphUuid;
  }

  public void setTaskGraphUuid(@javax.annotation.Nullable String taskGraphUuid) {
    this.taskGraphUuid = taskGraphUuid;
  }


  public ArrayTask clientNodeUuid(@javax.annotation.Nullable String clientNodeUuid) {
    this.clientNodeUuid = clientNodeUuid;
    return this;
  }

  /**
   * If set, the client-defined ID of the node within this task&#39;s graph. 
   * @return clientNodeUuid
   */
  @javax.annotation.Nullable
  public String getClientNodeUuid() {
    return clientNodeUuid;
  }

  public void setClientNodeUuid(@javax.annotation.Nullable String clientNodeUuid) {
    this.clientNodeUuid = clientNodeUuid;
  }


  public ArrayTask cloudProvider(@javax.annotation.Nullable String cloudProvider) {
    this.cloudProvider = cloudProvider;
    return this;
  }

  /**
   * The name of the cloud provider where this task executed.
   * @return cloudProvider
   */
  @javax.annotation.Nullable
  public String getCloudProvider() {
    return cloudProvider;
  }

  public void setCloudProvider(@javax.annotation.Nullable String cloudProvider) {
    this.cloudProvider = cloudProvider;
  }


  public ArrayTask cloudRegion(@javax.annotation.Nullable String cloudRegion) {
    this.cloudRegion = cloudRegion;
    return this;
  }

  /**
   * The region of the cloud provider where this task executed.
   * @return cloudRegion
   */
  @javax.annotation.Nullable
  public String getCloudRegion() {
    return cloudRegion;
  }

  public void setCloudRegion(@javax.annotation.Nullable String cloudRegion) {
    this.cloudRegion = cloudRegion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArrayTask arrayTask = (ArrayTask) o;
    return Objects.equals(this.id, arrayTask.id) &&
        Objects.equals(this.name, arrayTask.name) &&
        Objects.equals(this.username, arrayTask.username) &&
        Objects.equals(this.description, arrayTask.description) &&
        Objects.equals(this.arrayMetadata, arrayTask.arrayMetadata) &&
        Objects.equals(this.subarray, arrayTask.subarray) &&
        Objects.equals(this.memory, arrayTask.memory) &&
        Objects.equals(this.cpu, arrayTask.cpu) &&
        Objects.equals(this.namespace, arrayTask.namespace) &&
        Objects.equals(this.status, arrayTask.status) &&
        Objects.equals(this.statusMessage, arrayTask.statusMessage) &&
        Objects.equals(this.startTime, arrayTask.startTime) &&
        Objects.equals(this.finishTime, arrayTask.finishTime) &&
        Objects.equals(this.cost, arrayTask.cost) &&
        Objects.equals(this.egressCost, arrayTask.egressCost) &&
        Objects.equals(this.accessCost, arrayTask.accessCost) &&
        Objects.equals(this.queryType, arrayTask.queryType) &&
        Objects.equals(this.udfCode, arrayTask.udfCode) &&
        Objects.equals(this.udfLanguage, arrayTask.udfLanguage) &&
        Objects.equals(this.sqlQuery, arrayTask.sqlQuery) &&
        Objects.equals(this.type, arrayTask.type) &&
        Objects.equals(this.activity, arrayTask.activity) &&
        Objects.equals(this.logs, arrayTask.logs) &&
        Objects.equals(this.duration, arrayTask.duration) &&
        Objects.equals(this.sqlInitCommands, arrayTask.sqlInitCommands) &&
        Objects.equals(this.sqlParameters, arrayTask.sqlParameters) &&
        Objects.equals(this.resultFormat, arrayTask.resultFormat) &&
        Objects.equals(this.taskGraphUuid, arrayTask.taskGraphUuid) &&
        Objects.equals(this.clientNodeUuid, arrayTask.clientNodeUuid) &&
        Objects.equals(this.cloudProvider, arrayTask.cloudProvider) &&
        Objects.equals(this.cloudRegion, arrayTask.cloudRegion);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, username, description, arrayMetadata, subarray, memory, cpu, namespace, status, statusMessage, startTime, finishTime, cost, egressCost, accessCost, queryType, udfCode, udfLanguage, sqlQuery, type, activity, logs, duration, sqlInitCommands, sqlParameters, resultFormat, taskGraphUuid, clientNodeUuid, cloudProvider, cloudRegion);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArrayTask {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    arrayMetadata: ").append(toIndentedString(arrayMetadata)).append("\n");
    sb.append("    subarray: ").append(toIndentedString(subarray)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    finishTime: ").append(toIndentedString(finishTime)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    egressCost: ").append(toIndentedString(egressCost)).append("\n");
    sb.append("    accessCost: ").append(toIndentedString(accessCost)).append("\n");
    sb.append("    queryType: ").append(toIndentedString(queryType)).append("\n");
    sb.append("    udfCode: ").append(toIndentedString(udfCode)).append("\n");
    sb.append("    udfLanguage: ").append(toIndentedString(udfLanguage)).append("\n");
    sb.append("    sqlQuery: ").append(toIndentedString(sqlQuery)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    sqlInitCommands: ").append(toIndentedString(sqlInitCommands)).append("\n");
    sb.append("    sqlParameters: ").append(toIndentedString(sqlParameters)).append("\n");
    sb.append("    resultFormat: ").append(toIndentedString(resultFormat)).append("\n");
    sb.append("    taskGraphUuid: ").append(toIndentedString(taskGraphUuid)).append("\n");
    sb.append("    clientNodeUuid: ").append(toIndentedString(clientNodeUuid)).append("\n");
    sb.append("    cloudProvider: ").append(toIndentedString(cloudProvider)).append("\n");
    sb.append("    cloudRegion: ").append(toIndentedString(cloudRegion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("username");
    openapiFields.add("description");
    openapiFields.add("array_metadata");
    openapiFields.add("subarray");
    openapiFields.add("memory");
    openapiFields.add("cpu");
    openapiFields.add("namespace");
    openapiFields.add("status");
    openapiFields.add("status_message");
    openapiFields.add("start_time");
    openapiFields.add("finish_time");
    openapiFields.add("cost");
    openapiFields.add("egress_cost");
    openapiFields.add("access_cost");
    openapiFields.add("query_type");
    openapiFields.add("udf_code");
    openapiFields.add("udf_language");
    openapiFields.add("sql_query");
    openapiFields.add("type");
    openapiFields.add("activity");
    openapiFields.add("logs");
    openapiFields.add("duration");
    openapiFields.add("sql_init_commands");
    openapiFields.add("sql_parameters");
    openapiFields.add("result_format");
    openapiFields.add("task_graph_uuid");
    openapiFields.add("client_node_uuid");
    openapiFields.add("cloud_provider");
    openapiFields.add("cloud_region");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArrayTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArrayTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArrayTask is not found in the empty JSON string", ArrayTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArrayTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArrayTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `array_metadata`
      if (jsonObj.get("array_metadata") != null && !jsonObj.get("array_metadata").isJsonNull()) {
        ArrayInfo.validateJsonElement(jsonObj.get("array_metadata"));
      }
      // validate the optional field `subarray`
      if (jsonObj.get("subarray") != null && !jsonObj.get("subarray").isJsonNull()) {
        DomainArray.validateJsonElement(jsonObj.get("subarray"));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ArrayTaskStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("status_message") != null && !jsonObj.get("status_message").isJsonNull()) && !jsonObj.get("status_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_message").toString()));
      }
      // validate the optional field `query_type`
      if (jsonObj.get("query_type") != null && !jsonObj.get("query_type").isJsonNull()) {
        Querytype.validateJsonElement(jsonObj.get("query_type"));
      }
      if ((jsonObj.get("udf_code") != null && !jsonObj.get("udf_code").isJsonNull()) && !jsonObj.get("udf_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `udf_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("udf_code").toString()));
      }
      if ((jsonObj.get("udf_language") != null && !jsonObj.get("udf_language").isJsonNull()) && !jsonObj.get("udf_language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `udf_language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("udf_language").toString()));
      }
      if ((jsonObj.get("sql_query") != null && !jsonObj.get("sql_query").isJsonNull()) && !jsonObj.get("sql_query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sql_query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sql_query").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        ArrayTaskType.validateJsonElement(jsonObj.get("type"));
      }
      if (jsonObj.get("activity") != null && !jsonObj.get("activity").isJsonNull()) {
        JsonArray jsonArrayactivity = jsonObj.getAsJsonArray("activity");
        if (jsonArrayactivity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activity").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activity` to be an array in the JSON string but got `%s`", jsonObj.get("activity").toString()));
          }

          // validate the optional field `activity` (array)
          for (int i = 0; i < jsonArrayactivity.size(); i++) {
            ArrayActivityLog.validateJsonElement(jsonArrayactivity.get(i));
          };
        }
      }
      if ((jsonObj.get("logs") != null && !jsonObj.get("logs").isJsonNull()) && !jsonObj.get("logs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logs").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sql_init_commands") != null && !jsonObj.get("sql_init_commands").isJsonNull() && !jsonObj.get("sql_init_commands").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sql_init_commands` to be an array in the JSON string but got `%s`", jsonObj.get("sql_init_commands").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sql_parameters") != null && !jsonObj.get("sql_parameters").isJsonNull() && !jsonObj.get("sql_parameters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sql_parameters` to be an array in the JSON string but got `%s`", jsonObj.get("sql_parameters").toString()));
      }
      // validate the optional field `result_format`
      if (jsonObj.get("result_format") != null && !jsonObj.get("result_format").isJsonNull()) {
        ResultFormat.validateJsonElement(jsonObj.get("result_format"));
      }
      if ((jsonObj.get("task_graph_uuid") != null && !jsonObj.get("task_graph_uuid").isJsonNull()) && !jsonObj.get("task_graph_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_graph_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task_graph_uuid").toString()));
      }
      if ((jsonObj.get("client_node_uuid") != null && !jsonObj.get("client_node_uuid").isJsonNull()) && !jsonObj.get("client_node_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_node_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_node_uuid").toString()));
      }
      if ((jsonObj.get("cloud_provider") != null && !jsonObj.get("cloud_provider").isJsonNull()) && !jsonObj.get("cloud_provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloud_provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloud_provider").toString()));
      }
      if ((jsonObj.get("cloud_region") != null && !jsonObj.get("cloud_region").isJsonNull()) && !jsonObj.get("cloud_region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloud_region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloud_region").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArrayTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArrayTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArrayTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArrayTask.class));

       return (TypeAdapter<T>) new TypeAdapter<ArrayTask>() {
           @Override
           public void write(JsonWriter out, ArrayTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArrayTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArrayTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArrayTask
   * @throws IOException if the JSON string is invalid with respect to ArrayTask
   */
  public static ArrayTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArrayTask.class);
  }

  /**
   * Convert an instance of ArrayTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

