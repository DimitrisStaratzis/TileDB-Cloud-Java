/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttributeBufferHeader;
import org.openapitools.client.model.Layout;
import org.openapitools.client.model.QueryReader;
import org.openapitools.client.model.Querystatus;
import org.openapitools.client.model.Querytype;
import org.openapitools.client.model.Writer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Query
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-21T11:51:21.275554462Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class Query {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private Querytype type;

  public static final String SERIALIZED_NAME_LAYOUT = "layout";
  @SerializedName(SERIALIZED_NAME_LAYOUT)
  @javax.annotation.Nonnull
  private Layout layout;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private Querystatus status;

  public static final String SERIALIZED_NAME_ATTRIBUTE_BUFFER_HEADERS = "attributeBufferHeaders";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_BUFFER_HEADERS)
  @javax.annotation.Nonnull
  private List<AttributeBufferHeader> attributeBufferHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_WRITER = "writer";
  @SerializedName(SERIALIZED_NAME_WRITER)
  @javax.annotation.Nullable
  private Writer writer;

  public static final String SERIALIZED_NAME_READER = "reader";
  @SerializedName(SERIALIZED_NAME_READER)
  @javax.annotation.Nullable
  private QueryReader reader;

  public static final String SERIALIZED_NAME_ARRAY = "array";
  @SerializedName(SERIALIZED_NAME_ARRAY)
  @javax.annotation.Nonnull
  private Array array;

  public static final String SERIALIZED_NAME_TOTAL_FIXED_LENGTH_BUFFER_BYTES = "totalFixedLengthBufferBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_FIXED_LENGTH_BUFFER_BYTES)
  @javax.annotation.Nonnull
  private Integer totalFixedLengthBufferBytes;

  public static final String SERIALIZED_NAME_TOTAL_VAR_LEN_BUFFER_BYTES = "totalVarLenBufferBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_VAR_LEN_BUFFER_BYTES)
  @javax.annotation.Nonnull
  private Integer totalVarLenBufferBytes;

  public Query() {
  }

  public Query type(@javax.annotation.Nonnull Querytype type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public Querytype getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull Querytype type) {
    this.type = type;
  }


  public Query layout(@javax.annotation.Nonnull Layout layout) {
    this.layout = layout;
    return this;
  }

  /**
   * Get layout
   * @return layout
   */
  @javax.annotation.Nonnull
  public Layout getLayout() {
    return layout;
  }

  public void setLayout(@javax.annotation.Nonnull Layout layout) {
    this.layout = layout;
  }


  public Query status(@javax.annotation.Nonnull Querystatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public Querystatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull Querystatus status) {
    this.status = status;
  }


  public Query attributeBufferHeaders(@javax.annotation.Nonnull List<AttributeBufferHeader> attributeBufferHeaders) {
    this.attributeBufferHeaders = attributeBufferHeaders;
    return this;
  }

  public Query addAttributeBufferHeadersItem(AttributeBufferHeader attributeBufferHeadersItem) {
    if (this.attributeBufferHeaders == null) {
      this.attributeBufferHeaders = new ArrayList<>();
    }
    this.attributeBufferHeaders.add(attributeBufferHeadersItem);
    return this;
  }

  /**
   * List of attribute buffer headers
   * @return attributeBufferHeaders
   */
  @javax.annotation.Nonnull
  public List<AttributeBufferHeader> getAttributeBufferHeaders() {
    return attributeBufferHeaders;
  }

  public void setAttributeBufferHeaders(@javax.annotation.Nonnull List<AttributeBufferHeader> attributeBufferHeaders) {
    this.attributeBufferHeaders = attributeBufferHeaders;
  }


  public Query writer(@javax.annotation.Nullable Writer writer) {
    this.writer = writer;
    return this;
  }

  /**
   * Get writer
   * @return writer
   */
  @javax.annotation.Nullable
  public Writer getWriter() {
    return writer;
  }

  public void setWriter(@javax.annotation.Nullable Writer writer) {
    this.writer = writer;
  }


  public Query reader(@javax.annotation.Nullable QueryReader reader) {
    this.reader = reader;
    return this;
  }

  /**
   * Get reader
   * @return reader
   */
  @javax.annotation.Nullable
  public QueryReader getReader() {
    return reader;
  }

  public void setReader(@javax.annotation.Nullable QueryReader reader) {
    this.reader = reader;
  }


  public Query array(@javax.annotation.Nonnull Array array) {
    this.array = array;
    return this;
  }

  /**
   * Get array
   * @return array
   */
  @javax.annotation.Nonnull
  public Array getArray() {
    return array;
  }

  public void setArray(@javax.annotation.Nonnull Array array) {
    this.array = array;
  }


  public Query totalFixedLengthBufferBytes(@javax.annotation.Nonnull Integer totalFixedLengthBufferBytes) {
    this.totalFixedLengthBufferBytes = totalFixedLengthBufferBytes;
    return this;
  }

  /**
   * Total number of bytes in fixed size attribute buffers.
   * @return totalFixedLengthBufferBytes
   */
  @javax.annotation.Nonnull
  public Integer getTotalFixedLengthBufferBytes() {
    return totalFixedLengthBufferBytes;
  }

  public void setTotalFixedLengthBufferBytes(@javax.annotation.Nonnull Integer totalFixedLengthBufferBytes) {
    this.totalFixedLengthBufferBytes = totalFixedLengthBufferBytes;
  }


  public Query totalVarLenBufferBytes(@javax.annotation.Nonnull Integer totalVarLenBufferBytes) {
    this.totalVarLenBufferBytes = totalVarLenBufferBytes;
    return this;
  }

  /**
   * Total number of bytes in variable size attribute buffers.
   * @return totalVarLenBufferBytes
   */
  @javax.annotation.Nonnull
  public Integer getTotalVarLenBufferBytes() {
    return totalVarLenBufferBytes;
  }

  public void setTotalVarLenBufferBytes(@javax.annotation.Nonnull Integer totalVarLenBufferBytes) {
    this.totalVarLenBufferBytes = totalVarLenBufferBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Query query = (Query) o;
    return Objects.equals(this.type, query.type) &&
        Objects.equals(this.layout, query.layout) &&
        Objects.equals(this.status, query.status) &&
        Objects.equals(this.attributeBufferHeaders, query.attributeBufferHeaders) &&
        Objects.equals(this.writer, query.writer) &&
        Objects.equals(this.reader, query.reader) &&
        Objects.equals(this.array, query.array) &&
        Objects.equals(this.totalFixedLengthBufferBytes, query.totalFixedLengthBufferBytes) &&
        Objects.equals(this.totalVarLenBufferBytes, query.totalVarLenBufferBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, layout, status, attributeBufferHeaders, writer, reader, array, totalFixedLengthBufferBytes, totalVarLenBufferBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Query {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    attributeBufferHeaders: ").append(toIndentedString(attributeBufferHeaders)).append("\n");
    sb.append("    writer: ").append(toIndentedString(writer)).append("\n");
    sb.append("    reader: ").append(toIndentedString(reader)).append("\n");
    sb.append("    array: ").append(toIndentedString(array)).append("\n");
    sb.append("    totalFixedLengthBufferBytes: ").append(toIndentedString(totalFixedLengthBufferBytes)).append("\n");
    sb.append("    totalVarLenBufferBytes: ").append(toIndentedString(totalVarLenBufferBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("layout");
    openapiFields.add("status");
    openapiFields.add("attributeBufferHeaders");
    openapiFields.add("writer");
    openapiFields.add("reader");
    openapiFields.add("array");
    openapiFields.add("totalFixedLengthBufferBytes");
    openapiFields.add("totalVarLenBufferBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("layout");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("attributeBufferHeaders");
    openapiRequiredFields.add("array");
    openapiRequiredFields.add("totalFixedLengthBufferBytes");
    openapiRequiredFields.add("totalVarLenBufferBytes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Query
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Query.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Query is not found in the empty JSON string", Query.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Query.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Query` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Query.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `type`
      Querytype.validateJsonElement(jsonObj.get("type"));
      // validate the required field `layout`
      Layout.validateJsonElement(jsonObj.get("layout"));
      // validate the required field `status`
      Querystatus.validateJsonElement(jsonObj.get("status"));
      // ensure the json data is an array
      if (!jsonObj.get("attributeBufferHeaders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeBufferHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("attributeBufferHeaders").toString()));
      }

      JsonArray jsonArrayattributeBufferHeaders = jsonObj.getAsJsonArray("attributeBufferHeaders");
      // validate the required field `attributeBufferHeaders` (array)
      for (int i = 0; i < jsonArrayattributeBufferHeaders.size(); i++) {
        AttributeBufferHeader.validateJsonElement(jsonArrayattributeBufferHeaders.get(i));
      };
      // validate the optional field `writer`
      if (jsonObj.get("writer") != null && !jsonObj.get("writer").isJsonNull()) {
        Writer.validateJsonElement(jsonObj.get("writer"));
      }
      // validate the optional field `reader`
      if (jsonObj.get("reader") != null && !jsonObj.get("reader").isJsonNull()) {
        QueryReader.validateJsonElement(jsonObj.get("reader"));
      }
      // validate the required field `array`
      Array.validateJsonElement(jsonObj.get("array"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Query.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Query' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Query> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Query.class));

       return (TypeAdapter<T>) new TypeAdapter<Query>() {
           @Override
           public void write(JsonWriter out, Query value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Query read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Query given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Query
   * @throws IOException if the JSON string is invalid with respect to Query
   */
  public static Query fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Query.class);
  }

  /**
   * Convert an instance of Query to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

