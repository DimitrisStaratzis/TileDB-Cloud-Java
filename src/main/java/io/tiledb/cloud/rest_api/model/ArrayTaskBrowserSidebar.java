/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.rest_api.JSON;

/**
 * Object for ui array tasks browser page
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-13T19:24:49.771847040-04:00[America/New_York]", comments = "Generator version: 7.7.0")
public class ArrayTaskBrowserSidebar {
  public static final String SERIALIZED_NAME_ORGANIZATIONS = "organizations";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONS)
  private List<String> organizations = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULT_COUNT_FOR_ALL = "result_count_for_all";
  @SerializedName(SERIALIZED_NAME_RESULT_COUNT_FOR_ALL)
  private Integer resultCountForAll;

  public static final String SERIALIZED_NAME_RESULT_COUNT_BY_NAMESPACE = "result_count_by_namespace";
  @SerializedName(SERIALIZED_NAME_RESULT_COUNT_BY_NAMESPACE)
  private Object resultCountByNamespace;

  public ArrayTaskBrowserSidebar() {
  }

  public ArrayTaskBrowserSidebar organizations(List<String> organizations) {
    this.organizations = organizations;
    return this;
  }

  public ArrayTaskBrowserSidebar addOrganizationsItem(String organizationsItem) {
    if (this.organizations == null) {
      this.organizations = new ArrayList<>();
    }
    this.organizations.add(organizationsItem);
    return this;
  }

  /**
   * list of all unique organizations the user is part of that have array tasks
   * @return organizations
   */
  @javax.annotation.Nullable
  public List<String> getOrganizations() {
    return organizations;
  }

  public void setOrganizations(List<String> organizations) {
    this.organizations = organizations;
  }


  public ArrayTaskBrowserSidebar resultCountForAll(Integer resultCountForAll) {
    this.resultCountForAll = resultCountForAll;
    return this;
  }

  /**
   * A count of \&quot;all\&quot;
   * @return resultCountForAll
   */
  @javax.annotation.Nullable
  public Integer getResultCountForAll() {
    return resultCountForAll;
  }

  public void setResultCountForAll(Integer resultCountForAll) {
    this.resultCountForAll = resultCountForAll;
  }


  public ArrayTaskBrowserSidebar resultCountByNamespace(Object resultCountByNamespace) {
    this.resultCountByNamespace = resultCountByNamespace;
    return this;
  }

  /**
   * A map that includes the result count by namespace
   * @return resultCountByNamespace
   */
  @javax.annotation.Nullable
  public Object getResultCountByNamespace() {
    return resultCountByNamespace;
  }

  public void setResultCountByNamespace(Object resultCountByNamespace) {
    this.resultCountByNamespace = resultCountByNamespace;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ArrayTaskBrowserSidebar instance itself
   */
  public ArrayTaskBrowserSidebar putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArrayTaskBrowserSidebar arrayTaskBrowserSidebar = (ArrayTaskBrowserSidebar) o;
    return Objects.equals(this.organizations, arrayTaskBrowserSidebar.organizations) &&
        Objects.equals(this.resultCountForAll, arrayTaskBrowserSidebar.resultCountForAll) &&
        Objects.equals(this.resultCountByNamespace, arrayTaskBrowserSidebar.resultCountByNamespace)&&
        Objects.equals(this.additionalProperties, arrayTaskBrowserSidebar.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(organizations, resultCountForAll, resultCountByNamespace, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArrayTaskBrowserSidebar {\n");
    sb.append("    organizations: ").append(toIndentedString(organizations)).append("\n");
    sb.append("    resultCountForAll: ").append(toIndentedString(resultCountForAll)).append("\n");
    sb.append("    resultCountByNamespace: ").append(toIndentedString(resultCountByNamespace)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("organizations");
    openapiFields.add("result_count_for_all");
    openapiFields.add("result_count_by_namespace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArrayTaskBrowserSidebar
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArrayTaskBrowserSidebar.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArrayTaskBrowserSidebar is not found in the empty JSON string", ArrayTaskBrowserSidebar.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("organizations") != null && !jsonObj.get("organizations").isJsonNull() && !jsonObj.get("organizations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizations` to be an array in the JSON string but got `%s`", jsonObj.get("organizations").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArrayTaskBrowserSidebar.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArrayTaskBrowserSidebar' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArrayTaskBrowserSidebar> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArrayTaskBrowserSidebar.class));

       return (TypeAdapter<T>) new TypeAdapter<ArrayTaskBrowserSidebar>() {
           @Override
           public void write(JsonWriter out, ArrayTaskBrowserSidebar value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ArrayTaskBrowserSidebar read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ArrayTaskBrowserSidebar instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArrayTaskBrowserSidebar given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArrayTaskBrowserSidebar
   * @throws IOException if the JSON string is invalid with respect to ArrayTaskBrowserSidebar
   */
  public static ArrayTaskBrowserSidebar fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArrayTaskBrowserSidebar.class);
  }

  /**
   * Convert an instance of ArrayTaskBrowserSidebar to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

