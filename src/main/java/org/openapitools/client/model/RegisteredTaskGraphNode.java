/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.TGInputNodeData;
import org.openapitools.client.model.TGSQLNodeData;
import org.openapitools.client.model.TGUDFNodeData;
import org.openapitools.client.model.UDFArrayDetails;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Information about a single node within a registered task graph. A single node represents one piece of data or a computational step; either as an input value, a data source, or a computation that acts upon earlier nodes. The structure parallels the existing &#x60;TaskGraphNodeMetadata&#x60;. 
 */
@ApiModel(description = "Information about a single node within a registered task graph. A single node represents one piece of data or a computational step; either as an input value, a data source, or a computation that acts upon earlier nodes. The structure parallels the existing `TaskGraphNodeMetadata`. ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-19T15:04:32.581406+03:00[Europe/Athens]")
public class RegisteredTaskGraphNode {
  public static final String SERIALIZED_NAME_CLIENT_NODE_ID = "client_node_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_NODE_ID)
  private String clientNodeId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DEPENDS_ON = "depends_on";
  @SerializedName(SERIALIZED_NAME_DEPENDS_ON)
  private List<String> dependsOn = null;

  public static final String SERIALIZED_NAME_ARRAY_NODE = "array_node";
  @SerializedName(SERIALIZED_NAME_ARRAY_NODE)
  private UDFArrayDetails arrayNode;

  public static final String SERIALIZED_NAME_INPUT_NODE = "input_node";
  @SerializedName(SERIALIZED_NAME_INPUT_NODE)
  private TGInputNodeData inputNode;

  public static final String SERIALIZED_NAME_SQL_NODE = "sql_node";
  @SerializedName(SERIALIZED_NAME_SQL_NODE)
  private TGSQLNodeData sqlNode;

  public static final String SERIALIZED_NAME_UDF_NODE = "udf_node";
  @SerializedName(SERIALIZED_NAME_UDF_NODE)
  private TGUDFNodeData udfNode;

  public RegisteredTaskGraphNode() { 
  }

  public RegisteredTaskGraphNode clientNodeId(String clientNodeId) {
    
    this.clientNodeId = clientNodeId;
    return this;
  }

   /**
   * The client-generated UUID of the given graph node.
   * @return clientNodeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The client-generated UUID of the given graph node.")

  public String getClientNodeId() {
    return clientNodeId;
  }


  public void setClientNodeId(String clientNodeId) {
    this.clientNodeId = clientNodeId;
  }


  public RegisteredTaskGraphNode name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * A client-specified name for the node. If provided, this must be unique. 
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A client-specified name for the node. If provided, this must be unique. ")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public RegisteredTaskGraphNode dependsOn(List<String> dependsOn) {
    
    this.dependsOn = dependsOn;
    return this;
  }

  public RegisteredTaskGraphNode addDependsOnItem(String dependsOnItem) {
    if (this.dependsOn == null) {
      this.dependsOn = new ArrayList<String>();
    }
    this.dependsOn.add(dependsOnItem);
    return this;
  }

   /**
   * The client_node_uuid of each node that this node depends upon. Used to define the structure of the graph. 
   * @return dependsOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The client_node_uuid of each node that this node depends upon. Used to define the structure of the graph. ")

  public List<String> getDependsOn() {
    return dependsOn;
  }


  public void setDependsOn(List<String> dependsOn) {
    this.dependsOn = dependsOn;
  }


  public RegisteredTaskGraphNode arrayNode(UDFArrayDetails arrayNode) {
    
    this.arrayNode = arrayNode;
    return this;
  }

   /**
   * Get arrayNode
   * @return arrayNode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UDFArrayDetails getArrayNode() {
    return arrayNode;
  }


  public void setArrayNode(UDFArrayDetails arrayNode) {
    this.arrayNode = arrayNode;
  }


  public RegisteredTaskGraphNode inputNode(TGInputNodeData inputNode) {
    
    this.inputNode = inputNode;
    return this;
  }

   /**
   * Get inputNode
   * @return inputNode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TGInputNodeData getInputNode() {
    return inputNode;
  }


  public void setInputNode(TGInputNodeData inputNode) {
    this.inputNode = inputNode;
  }


  public RegisteredTaskGraphNode sqlNode(TGSQLNodeData sqlNode) {
    
    this.sqlNode = sqlNode;
    return this;
  }

   /**
   * Get sqlNode
   * @return sqlNode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TGSQLNodeData getSqlNode() {
    return sqlNode;
  }


  public void setSqlNode(TGSQLNodeData sqlNode) {
    this.sqlNode = sqlNode;
  }


  public RegisteredTaskGraphNode udfNode(TGUDFNodeData udfNode) {
    
    this.udfNode = udfNode;
    return this;
  }

   /**
   * Get udfNode
   * @return udfNode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TGUDFNodeData getUdfNode() {
    return udfNode;
  }


  public void setUdfNode(TGUDFNodeData udfNode) {
    this.udfNode = udfNode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisteredTaskGraphNode registeredTaskGraphNode = (RegisteredTaskGraphNode) o;
    return Objects.equals(this.clientNodeId, registeredTaskGraphNode.clientNodeId) &&
        Objects.equals(this.name, registeredTaskGraphNode.name) &&
        Objects.equals(this.dependsOn, registeredTaskGraphNode.dependsOn) &&
        Objects.equals(this.arrayNode, registeredTaskGraphNode.arrayNode) &&
        Objects.equals(this.inputNode, registeredTaskGraphNode.inputNode) &&
        Objects.equals(this.sqlNode, registeredTaskGraphNode.sqlNode) &&
        Objects.equals(this.udfNode, registeredTaskGraphNode.udfNode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientNodeId, name, dependsOn, arrayNode, inputNode, sqlNode, udfNode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisteredTaskGraphNode {\n");
    sb.append("    clientNodeId: ").append(toIndentedString(clientNodeId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dependsOn: ").append(toIndentedString(dependsOn)).append("\n");
    sb.append("    arrayNode: ").append(toIndentedString(arrayNode)).append("\n");
    sb.append("    inputNode: ").append(toIndentedString(inputNode)).append("\n");
    sb.append("    sqlNode: ").append(toIndentedString(sqlNode)).append("\n");
    sb.append("    udfNode: ").append(toIndentedString(udfNode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

