/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Datatype;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.Layout;

/**
 * Domain of array
 */
@ApiModel(description = "Domain of array")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-19T15:04:32.581406+03:00[Europe/Athens]")
public class Domain {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Datatype type;

  public static final String SERIALIZED_NAME_TILE_ORDER = "tileOrder";
  @SerializedName(SERIALIZED_NAME_TILE_ORDER)
  private Layout tileOrder;

  public static final String SERIALIZED_NAME_CELL_ORDER = "cellOrder";
  @SerializedName(SERIALIZED_NAME_CELL_ORDER)
  private Layout cellOrder;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<Dimension> dimensions = new ArrayList<Dimension>();

  public Domain() { 
  }

  public Domain type(Datatype type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Datatype getType() {
    return type;
  }


  public void setType(Datatype type) {
    this.type = type;
  }


  public Domain tileOrder(Layout tileOrder) {
    
    this.tileOrder = tileOrder;
    return this;
  }

   /**
   * Get tileOrder
   * @return tileOrder
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Layout getTileOrder() {
    return tileOrder;
  }


  public void setTileOrder(Layout tileOrder) {
    this.tileOrder = tileOrder;
  }


  public Domain cellOrder(Layout cellOrder) {
    
    this.cellOrder = cellOrder;
    return this;
  }

   /**
   * Get cellOrder
   * @return cellOrder
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Layout getCellOrder() {
    return cellOrder;
  }


  public void setCellOrder(Layout cellOrder) {
    this.cellOrder = cellOrder;
  }


  public Domain dimensions(List<Dimension> dimensions) {
    
    this.dimensions = dimensions;
    return this;
  }

  public Domain addDimensionsItem(Dimension dimensionsItem) {
    this.dimensions.add(dimensionsItem);
    return this;
  }

   /**
   * Array of dimensions
   * @return dimensions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Array of dimensions")

  public List<Dimension> getDimensions() {
    return dimensions;
  }


  public void setDimensions(List<Dimension> dimensions) {
    this.dimensions = dimensions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Domain domain = (Domain) o;
    return Objects.equals(this.type, domain.type) &&
        Objects.equals(this.tileOrder, domain.tileOrder) &&
        Objects.equals(this.cellOrder, domain.cellOrder) &&
        Objects.equals(this.dimensions, domain.dimensions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, tileOrder, cellOrder, dimensions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Domain {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    tileOrder: ").append(toIndentedString(tileOrder)).append("\n");
    sb.append("    cellOrder: ").append(toIndentedString(cellOrder)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

