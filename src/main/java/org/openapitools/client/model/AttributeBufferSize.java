/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * object representing buffer size of an attribute
 */
@ApiModel(description = "object representing buffer size of an attribute")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-19T15:04:32.581406+03:00[Europe/Athens]")
public class AttributeBufferSize {
  public static final String SERIALIZED_NAME_ATTRIBUTE = "attribute";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE)
  private String attribute;

  public static final String SERIALIZED_NAME_OFFSET_BYTES = "offsetBytes";
  @SerializedName(SERIALIZED_NAME_OFFSET_BYTES)
  private Integer offsetBytes;

  public static final String SERIALIZED_NAME_DATA_BYTES = "dataBytes";
  @SerializedName(SERIALIZED_NAME_DATA_BYTES)
  private Integer dataBytes;

  public AttributeBufferSize() { 
  }

  public AttributeBufferSize attribute(String attribute) {
    
    this.attribute = attribute;
    return this;
  }

   /**
   * name of attribute
   * @return attribute
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "name of attribute")

  public String getAttribute() {
    return attribute;
  }


  public void setAttribute(String attribute) {
    this.attribute = attribute;
  }


  public AttributeBufferSize offsetBytes(Integer offsetBytes) {
    
    this.offsetBytes = offsetBytes;
    return this;
  }

   /**
   * buffer size (in bytes) of offset buffer
   * @return offsetBytes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "buffer size (in bytes) of offset buffer")

  public Integer getOffsetBytes() {
    return offsetBytes;
  }


  public void setOffsetBytes(Integer offsetBytes) {
    this.offsetBytes = offsetBytes;
  }


  public AttributeBufferSize dataBytes(Integer dataBytes) {
    
    this.dataBytes = dataBytes;
    return this;
  }

   /**
   * buffer size (in bytes) of data buffer
   * @return dataBytes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "buffer size (in bytes) of data buffer")

  public Integer getDataBytes() {
    return dataBytes;
  }


  public void setDataBytes(Integer dataBytes) {
    this.dataBytes = dataBytes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributeBufferSize attributeBufferSize = (AttributeBufferSize) o;
    return Objects.equals(this.attribute, attributeBufferSize.attribute) &&
        Objects.equals(this.offsetBytes, attributeBufferSize.offsetBytes) &&
        Objects.equals(this.dataBytes, attributeBufferSize.dataBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attribute, offsetBytes, dataBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributeBufferSize {\n");
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("    offsetBytes: ").append(toIndentedString(offsetBytes)).append("\n");
    sb.append("    dataBytes: ").append(toIndentedString(dataBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

