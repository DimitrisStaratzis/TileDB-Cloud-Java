/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.SubarrayPartitioner;

/**
 * state for reads
 */
@ApiModel(description = "state for reads")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-19T15:04:32.581406+03:00[Europe/Athens]")
public class ReadState {
  public static final String SERIALIZED_NAME_INITIALIZED = "initialized";
  @SerializedName(SERIALIZED_NAME_INITIALIZED)
  private Boolean initialized;

  public static final String SERIALIZED_NAME_OVERFLOWED = "overflowed";
  @SerializedName(SERIALIZED_NAME_OVERFLOWED)
  private Boolean overflowed;

  public static final String SERIALIZED_NAME_UNSPLITTABLE = "unsplittable";
  @SerializedName(SERIALIZED_NAME_UNSPLITTABLE)
  private Boolean unsplittable;

  public static final String SERIALIZED_NAME_SUBARRAY_PARTITIONER = "subarrayPartitioner";
  @SerializedName(SERIALIZED_NAME_SUBARRAY_PARTITIONER)
  private SubarrayPartitioner subarrayPartitioner;

  public ReadState() { 
  }

  public ReadState initialized(Boolean initialized) {
    
    this.initialized = initialized;
    return this;
  }

   /**
   * True if the reader has been initialized.
   * @return initialized
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the reader has been initialized.")

  public Boolean getInitialized() {
    return initialized;
  }


  public void setInitialized(Boolean initialized) {
    this.initialized = initialized;
  }


  public ReadState overflowed(Boolean overflowed) {
    
    this.overflowed = overflowed;
    return this;
  }

   /**
   * True if the query produced results that could not fit in some buffer.
   * @return overflowed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the query produced results that could not fit in some buffer.")

  public Boolean getOverflowed() {
    return overflowed;
  }


  public void setOverflowed(Boolean overflowed) {
    this.overflowed = overflowed;
  }


  public ReadState unsplittable(Boolean unsplittable) {
    
    this.unsplittable = unsplittable;
    return this;
  }

   /**
   * True if the current subarray partition is unsplittable.
   * @return unsplittable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the current subarray partition is unsplittable.")

  public Boolean getUnsplittable() {
    return unsplittable;
  }


  public void setUnsplittable(Boolean unsplittable) {
    this.unsplittable = unsplittable;
  }


  public ReadState subarrayPartitioner(SubarrayPartitioner subarrayPartitioner) {
    
    this.subarrayPartitioner = subarrayPartitioner;
    return this;
  }

   /**
   * Get subarrayPartitioner
   * @return subarrayPartitioner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SubarrayPartitioner getSubarrayPartitioner() {
    return subarrayPartitioner;
  }


  public void setSubarrayPartitioner(SubarrayPartitioner subarrayPartitioner) {
    this.subarrayPartitioner = subarrayPartitioner;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReadState readState = (ReadState) o;
    return Objects.equals(this.initialized, readState.initialized) &&
        Objects.equals(this.overflowed, readState.overflowed) &&
        Objects.equals(this.unsplittable, readState.unsplittable) &&
        Objects.equals(this.subarrayPartitioner, readState.subarrayPartitioner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(initialized, overflowed, unsplittable, subarrayPartitioner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReadState {\n");
    sb.append("    initialized: ").append(toIndentedString(initialized)).append("\n");
    sb.append("    overflowed: ").append(toIndentedString(overflowed)).append("\n");
    sb.append("    unsplittable: ").append(toIndentedString(unsplittable)).append("\n");
    sb.append("    subarrayPartitioner: ").append(toIndentedString(subarrayPartitioner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

