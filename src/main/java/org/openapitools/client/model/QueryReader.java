/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.Layout;
import org.openapitools.client.model.ReadState;
import org.openapitools.client.model.Subarray;

/**
 * Read struct (can&#39;t be called reader due to class name conflict)
 */
@ApiModel(description = "Read struct (can't be called reader due to class name conflict)")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-19T15:04:32.581406+03:00[Europe/Athens]")
public class QueryReader {
  public static final String SERIALIZED_NAME_LAYOUT = "layout";
  @SerializedName(SERIALIZED_NAME_LAYOUT)
  private Layout layout;

  public static final String SERIALIZED_NAME_SUBARRAY = "subarray";
  @SerializedName(SERIALIZED_NAME_SUBARRAY)
  private Subarray subarray;

  public static final String SERIALIZED_NAME_READ_STATE = "readState";
  @SerializedName(SERIALIZED_NAME_READ_STATE)
  private ReadState readState;

  public static final String SERIALIZED_NAME_VAR_OFFSETS_MODE = "varOffsetsMode";
  @SerializedName(SERIALIZED_NAME_VAR_OFFSETS_MODE)
  private String varOffsetsMode;

  public static final String SERIALIZED_NAME_VAR_OFFSETS_ADD_EXTRA_ELEMENT = "varOffsetsAddExtraElement";
  @SerializedName(SERIALIZED_NAME_VAR_OFFSETS_ADD_EXTRA_ELEMENT)
  private Boolean varOffsetsAddExtraElement;

  public static final String SERIALIZED_NAME_VAR_OFFSETS_BITSIZE = "varOffsetsBitsize";
  @SerializedName(SERIALIZED_NAME_VAR_OFFSETS_BITSIZE)
  private Integer varOffsetsBitsize;

  public QueryReader() { 
  }

  public QueryReader layout(Layout layout) {
    
    this.layout = layout;
    return this;
  }

   /**
   * Get layout
   * @return layout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Layout getLayout() {
    return layout;
  }


  public void setLayout(Layout layout) {
    this.layout = layout;
  }


  public QueryReader subarray(Subarray subarray) {
    
    this.subarray = subarray;
    return this;
  }

   /**
   * Get subarray
   * @return subarray
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Subarray getSubarray() {
    return subarray;
  }


  public void setSubarray(Subarray subarray) {
    this.subarray = subarray;
  }


  public QueryReader readState(ReadState readState) {
    
    this.readState = readState;
    return this;
  }

   /**
   * Get readState
   * @return readState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReadState getReadState() {
    return readState;
  }


  public void setReadState(ReadState readState) {
    this.readState = readState;
  }


  public QueryReader varOffsetsMode(String varOffsetsMode) {
    
    this.varOffsetsMode = varOffsetsMode;
    return this;
  }

   /**
   * The offsets format (bytes or elements) to be used.
   * @return varOffsetsMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The offsets format (bytes or elements) to be used.")

  public String getVarOffsetsMode() {
    return varOffsetsMode;
  }


  public void setVarOffsetsMode(String varOffsetsMode) {
    this.varOffsetsMode = varOffsetsMode;
  }


  public QueryReader varOffsetsAddExtraElement(Boolean varOffsetsAddExtraElement) {
    
    this.varOffsetsAddExtraElement = varOffsetsAddExtraElement;
    return this;
  }

   /**
   * True if an extra element will be added to the end of the offsets buffer.
   * @return varOffsetsAddExtraElement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if an extra element will be added to the end of the offsets buffer.")

  public Boolean getVarOffsetsAddExtraElement() {
    return varOffsetsAddExtraElement;
  }


  public void setVarOffsetsAddExtraElement(Boolean varOffsetsAddExtraElement) {
    this.varOffsetsAddExtraElement = varOffsetsAddExtraElement;
  }


  public QueryReader varOffsetsBitsize(Integer varOffsetsBitsize) {
    
    this.varOffsetsBitsize = varOffsetsBitsize;
    return this;
  }

   /**
   * The offsets bitsize (32 or 64) to be used.
   * @return varOffsetsBitsize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The offsets bitsize (32 or 64) to be used.")

  public Integer getVarOffsetsBitsize() {
    return varOffsetsBitsize;
  }


  public void setVarOffsetsBitsize(Integer varOffsetsBitsize) {
    this.varOffsetsBitsize = varOffsetsBitsize;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryReader queryReader = (QueryReader) o;
    return Objects.equals(this.layout, queryReader.layout) &&
        Objects.equals(this.subarray, queryReader.subarray) &&
        Objects.equals(this.readState, queryReader.readState) &&
        Objects.equals(this.varOffsetsMode, queryReader.varOffsetsMode) &&
        Objects.equals(this.varOffsetsAddExtraElement, queryReader.varOffsetsAddExtraElement) &&
        Objects.equals(this.varOffsetsBitsize, queryReader.varOffsetsBitsize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(layout, subarray, readState, varOffsetsMode, varOffsetsAddExtraElement, varOffsetsBitsize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryReader {\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    subarray: ").append(toIndentedString(subarray)).append("\n");
    sb.append("    readState: ").append(toIndentedString(readState)).append("\n");
    sb.append("    varOffsetsMode: ").append(toIndentedString(varOffsetsMode)).append("\n");
    sb.append("    varOffsetsAddExtraElement: ").append(toIndentedString(varOffsetsAddExtraElement)).append("\n");
    sb.append("    varOffsetsBitsize: ").append(toIndentedString(varOffsetsBitsize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

