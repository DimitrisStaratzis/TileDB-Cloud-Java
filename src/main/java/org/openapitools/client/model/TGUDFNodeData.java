/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ResultFormat;
import org.openapitools.client.model.TGUDFArgument;
import org.openapitools.client.model.TGUDFEnvironment;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * A node specifying the execution of a user-defined function.
 */
@ApiModel(description = "A node specifying the execution of a user-defined function.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-19T15:04:32.581406+03:00[Europe/Athens]")
public class TGUDFNodeData {
  public static final String SERIALIZED_NAME_REGISTERED_UDF_NAME = "registered_udf_name";
  @SerializedName(SERIALIZED_NAME_REGISTERED_UDF_NAME)
  private String registeredUdfName;

  public static final String SERIALIZED_NAME_EXECUTABLE_CODE = "executable_code";
  @SerializedName(SERIALIZED_NAME_EXECUTABLE_CODE)
  private String executableCode;

  public static final String SERIALIZED_NAME_SOURCE_TEXT = "source_text";
  @SerializedName(SERIALIZED_NAME_SOURCE_TEXT)
  private String sourceText;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private TGUDFEnvironment environment;

  public static final String SERIALIZED_NAME_ARGUMENTS = "arguments";
  @SerializedName(SERIALIZED_NAME_ARGUMENTS)
  private List<TGUDFArgument> arguments = null;

  public static final String SERIALIZED_NAME_RESULT_FORMAT = "result_format";
  @SerializedName(SERIALIZED_NAME_RESULT_FORMAT)
  private ResultFormat resultFormat;

  public TGUDFNodeData() { 
  }

  public TGUDFNodeData registeredUdfName(String registeredUdfName) {
    
    this.registeredUdfName = registeredUdfName;
    return this;
  }

   /**
   * If set, the name of the registered UDF to execute, in the format &#x60;namespace/name&#x60;. Either this or &#x60;executable_code&#x60; should be set, but not both. 
   * @return registeredUdfName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If set, the name of the registered UDF to execute, in the format `namespace/name`. Either this or `executable_code` should be set, but not both. ")

  public String getRegisteredUdfName() {
    return registeredUdfName;
  }


  public void setRegisteredUdfName(String registeredUdfName) {
    this.registeredUdfName = registeredUdfName;
  }


  public TGUDFNodeData executableCode(String executableCode) {
    
    this.executableCode = executableCode;
    return this;
  }

   /**
   * If set, the base64 serialization of the code for this step, encoded in a language-specific format (e.g. Pickle for Python, serialization for R). 
   * @return executableCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If set, the base64 serialization of the code for this step, encoded in a language-specific format (e.g. Pickle for Python, serialization for R). ")

  public String getExecutableCode() {
    return executableCode;
  }


  public void setExecutableCode(String executableCode) {
    this.executableCode = executableCode;
  }


  public TGUDFNodeData sourceText(String sourceText) {
    
    this.sourceText = sourceText;
    return this;
  }

   /**
   * Optionally, the source text for the code passed in &#x60;executable_code&#x60;. *For reference only; only the code in &#x60;executable_code&#x60; is actually executed.* This will be included in activity logs and may be useful for debugging. 
   * @return sourceText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optionally, the source text for the code passed in `executable_code`. *For reference only; only the code in `executable_code` is actually executed.* This will be included in activity logs and may be useful for debugging. ")

  public String getSourceText() {
    return sourceText;
  }


  public void setSourceText(String sourceText) {
    this.sourceText = sourceText;
  }


  public TGUDFNodeData environment(TGUDFEnvironment environment) {
    
    this.environment = environment;
    return this;
  }

   /**
   * Get environment
   * @return environment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TGUDFEnvironment getEnvironment() {
    return environment;
  }


  public void setEnvironment(TGUDFEnvironment environment) {
    this.environment = environment;
  }


  public TGUDFNodeData arguments(List<TGUDFArgument> arguments) {
    
    this.arguments = arguments;
    return this;
  }

  public TGUDFNodeData addArgumentsItem(TGUDFArgument argumentsItem) {
    if (this.arguments == null) {
      this.arguments = new ArrayList<TGUDFArgument>();
    }
    this.arguments.add(argumentsItem);
    return this;
  }

   /**
   * The arguments to a UDF function. This encompasses both named and positional arguments. The format is designed to provide compatibility across languages like Python which have a fairly traditional split between positional arguments and named arguments, and languages like R which has a rather unique way of specifying arguments. For Python (and most other languages), all positional arguments will come before all named arguments (if any are present):      // fn(arg1, arg2, arg3)     [       {value: arg1},       {value: arg2},       {value: arg3},     ]     // fn(arg1, arg2, n&#x3D;kw1, a&#x3D;kw2)     [       {value: arg1},       {value: arg2},       {name: \&quot;n\&quot;, value: kw1},       {name: \&quot;a\&quot;, value: kw2},     ]     // fn(kw&#x3D;k1, only&#x3D;k2)     [       {name: \&quot;kw\&quot;, value: k1},       {name: \&quot;only\&quot;, value: k2},     ]  However, in R, named and positional arguments may be intermixed freely:      // fn(arg, n&#x3D;kw1, arg2)     [       {value: arg},       {name: \&quot;n\&quot;, value: kw1},       {value: arg2},     ] 
   * @return arguments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The arguments to a UDF function. This encompasses both named and positional arguments. The format is designed to provide compatibility across languages like Python which have a fairly traditional split between positional arguments and named arguments, and languages like R which has a rather unique way of specifying arguments. For Python (and most other languages), all positional arguments will come before all named arguments (if any are present):      // fn(arg1, arg2, arg3)     [       {value: arg1},       {value: arg2},       {value: arg3},     ]     // fn(arg1, arg2, n=kw1, a=kw2)     [       {value: arg1},       {value: arg2},       {name: \"n\", value: kw1},       {name: \"a\", value: kw2},     ]     // fn(kw=k1, only=k2)     [       {name: \"kw\", value: k1},       {name: \"only\", value: k2},     ]  However, in R, named and positional arguments may be intermixed freely:      // fn(arg, n=kw1, arg2)     [       {value: arg},       {name: \"n\", value: kw1},       {value: arg2},     ] ")

  public List<TGUDFArgument> getArguments() {
    return arguments;
  }


  public void setArguments(List<TGUDFArgument> arguments) {
    this.arguments = arguments;
  }


  public TGUDFNodeData resultFormat(ResultFormat resultFormat) {
    
    this.resultFormat = resultFormat;
    return this;
  }

   /**
   * Get resultFormat
   * @return resultFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResultFormat getResultFormat() {
    return resultFormat;
  }


  public void setResultFormat(ResultFormat resultFormat) {
    this.resultFormat = resultFormat;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TGUDFNodeData tgUDFNodeData = (TGUDFNodeData) o;
    return Objects.equals(this.registeredUdfName, tgUDFNodeData.registeredUdfName) &&
        Objects.equals(this.executableCode, tgUDFNodeData.executableCode) &&
        Objects.equals(this.sourceText, tgUDFNodeData.sourceText) &&
        Objects.equals(this.environment, tgUDFNodeData.environment) &&
        Objects.equals(this.arguments, tgUDFNodeData.arguments) &&
        Objects.equals(this.resultFormat, tgUDFNodeData.resultFormat);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(registeredUdfName, executableCode, sourceText, environment, arguments, resultFormat);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TGUDFNodeData {\n");
    sb.append("    registeredUdfName: ").append(toIndentedString(registeredUdfName)).append("\n");
    sb.append("    executableCode: ").append(toIndentedString(executableCode)).append("\n");
    sb.append("    sourceText: ").append(toIndentedString(sourceText)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    resultFormat: ").append(toIndentedString(resultFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

