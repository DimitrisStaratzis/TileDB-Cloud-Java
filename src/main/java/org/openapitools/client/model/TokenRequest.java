/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * A request from a user for an api token
 */
@ApiModel(description = "A request from a user for an api token")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-19T15:04:32.581406+03:00[Europe/Athens]")
public class TokenRequest {
  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private OffsetDateTime expires;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope = "*";

  public TokenRequest() { 
  }

  public TokenRequest expires(OffsetDateTime expires) {
    
    this.expires = expires;
    return this;
  }

   /**
   * Expiration date for token, if empty token defaults to 30 minutes
   * @return expires
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Expiration date for token, if empty token defaults to 30 minutes")

  public OffsetDateTime getExpires() {
    return expires;
  }


  public void setExpires(OffsetDateTime expires) {
    this.expires = expires;
  }


  public TokenRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Optional name for token, if the name already exists for the user it will be auto incremented (i.e. myToken-1)
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "myToken", value = "Optional name for token, if the name already exists for the user it will be auto incremented (i.e. myToken-1)")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TokenRequest scope(String scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * Optional scope to limit token, defaults to all permissions, current supported values are password_reset or *
   * @return scope
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "*", value = "Optional scope to limit token, defaults to all permissions, current supported values are password_reset or *")

  public String getScope() {
    return scope;
  }


  public void setScope(String scope) {
    this.scope = scope;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenRequest tokenRequest = (TokenRequest) o;
    return Objects.equals(this.expires, tokenRequest.expires) &&
        Objects.equals(this.name, tokenRequest.name) &&
        Objects.equals(this.scope, tokenRequest.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expires, name, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenRequest {\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

