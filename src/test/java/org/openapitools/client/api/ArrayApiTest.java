/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ArrayActivityLog;
import org.openapitools.client.model.ArrayBrowserData;
import org.openapitools.client.model.ArrayBrowserSidebar;
import org.openapitools.client.model.ArrayEndTimestampData;
import org.openapitools.client.model.ArrayInfo;
import org.openapitools.client.model.ArrayInfoUpdate;
import org.openapitools.client.model.ArrayMetadata;
import org.openapitools.client.model.ArraySample;
import org.openapitools.client.model.ArraySchema;
import org.openapitools.client.model.ArraySharing;
import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LastAccessedArray;
import org.openapitools.client.model.MaxBufferSizes;
import org.openapitools.client.model.NonEmptyDomain;
import org.openapitools.client.model.TileDBConfig;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ArrayApi
 */
@Ignore
public class ArrayApiTest {

    private final ArrayApi api = new ArrayApi();

    
    /**
     * 
     *
     * get array activity logs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void arrayActivityLogTest() throws ApiException {
        String namespace = null;
        String array = null;
        Integer start = null;
        Integer end = null;
        String eventTypes = null;
        String taskId = null;
        Boolean hasTaskId = null;
                List<ArrayActivityLog> response = api.arrayActivityLog(namespace, array, start, end, eventTypes, taskId, hasTaskId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Fetch a list of all arrays that are owned directly by user or user&#39;s organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void arraysBrowserOwnedGetTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        String search = null;
        String namespace = null;
        String orderby = null;
        String permissions = null;
        List<String> tag = null;
        List<String> excludeTag = null;
        List<String> fileType = null;
        List<String> excludeFileType = null;
        List<String> fileProperty = null;
                ArrayBrowserData response = api.arraysBrowserOwnedGet(page, perPage, search, namespace, orderby, permissions, tag, excludeTag, fileType, excludeFileType, fileProperty);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Fetch a sidebar for arrays that are owned directly by user or user&#39;s organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void arraysBrowserOwnedSidebarGetTest() throws ApiException {
                ArrayBrowserSidebar response = api.arraysBrowserOwnedSidebarGet();
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Fetch a list of all arrays that have been shared publically
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void arraysBrowserPublicGetTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        String search = null;
        String namespace = null;
        String orderby = null;
        String permissions = null;
        List<String> tag = null;
        List<String> excludeTag = null;
        List<String> fileType = null;
        List<String> excludeFileType = null;
        List<String> fileProperty = null;
                ArrayBrowserData response = api.arraysBrowserPublicGet(page, perPage, search, namespace, orderby, permissions, tag, excludeTag, fileType, excludeFileType, fileProperty);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Fetch a sidebar of all arrays that have been shared publically
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void arraysBrowserPublicSidebarGetTest() throws ApiException {
                ArrayBrowserSidebar response = api.arraysBrowserPublicSidebarGet();
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Fetch a list of all arrays that have been shared with the user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void arraysBrowserSharedGetTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        String search = null;
        String namespace = null;
        String orderby = null;
        String permissions = null;
        List<String> tag = null;
        List<String> excludeTag = null;
        List<String> fileType = null;
        List<String> excludeFileType = null;
        List<String> fileProperty = null;
                ArrayBrowserData response = api.arraysBrowserSharedGet(page, perPage, search, namespace, orderby, permissions, tag, excludeTag, fileType, excludeFileType, fileProperty);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Fetch a list of all arrays that have been shared with the user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void arraysBrowserSharedSidebarGetTest() throws ApiException {
                ArrayBrowserSidebar response = api.arraysBrowserSharedSidebarGet();
        // TODO: test validations
    }
    
    /**
     * 
     *
     * retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void arraysNamespaceArrayEndTimestampsGetTest() throws ApiException {
        String namespace = null;
        String array = null;
        Integer page = null;
        Integer perPage = null;
                ArrayEndTimestampData response = api.arraysNamespaceArrayEndTimestampsGet(namespace, array, page, perPage);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * consolidate an array at a specified URI
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void consolidateArrayTest() throws ApiException {
        String namespace = null;
        String array = null;
        TileDBConfig tiledbConfig = null;
                api.consolidateArray(namespace, array, tiledbConfig);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a array schema at a specified URI registered to a group/project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createArrayTest() throws ApiException {
        String namespace = null;
        String array = null;
        String contentType = null;
        ArraySchema arraySchema = null;
        String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = null;
                api.createArray(namespace, array, contentType, arraySchema, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a array
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteArrayTest() throws ApiException {
        String namespace = null;
        String array = null;
        String contentType = null;
                api.deleteArray(namespace, array, contentType);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * deregister a array
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deregisterArrayTest() throws ApiException {
        String namespace = null;
        String array = null;
                api.deregisterArray(namespace, array);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * get activity log by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getActivityLogByIdTest() throws ApiException {
        String namespace = null;
        String array = null;
        String id = null;
                ArrayActivityLog response = api.getActivityLogById(namespace, array, id);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * get all array metadata user has access to
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllArrayMetadataTest() throws ApiException {
        String publicShare = null;
                List<ArrayInfo> response = api.getAllArrayMetadata(publicShare);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * get an ArraySchema using a url encoded uri
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getArrayTest() throws ApiException {
        String namespace = null;
        String array = null;
        String contentType = null;
                ArraySchema response = api.getArray(namespace, array, contentType);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * get the max buffer sizes of an array for a subarray
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getArrayMaxBufferSizesTest() throws ApiException {
        String namespace = null;
        String array = null;
        String subarray = null;
        String contentType = null;
        String xPayer = null;
                MaxBufferSizes response = api.getArrayMaxBufferSizes(namespace, array, subarray, contentType, xPayer);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * get metadata from the array in JSON format
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getArrayMetaDataJsonTest() throws ApiException {
        String namespace = null;
        String array = null;
        Integer length = null;
        Integer endTimestamp = null;
                Object response = api.getArrayMetaDataJson(namespace, array, length, endTimestamp);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * get metadata on an array
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getArrayMetadataTest() throws ApiException {
        String namespace = null;
        String array = null;
                ArrayInfo response = api.getArrayMetadata(namespace, array);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * get metadata on an array
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getArrayMetadataCapnpTest() throws ApiException {
        String namespace = null;
        String array = null;
                ArrayMetadata response = api.getArrayMetadataCapnp(namespace, array);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * get the non empty domain of an array
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getArrayNonEmptyDomainTest() throws ApiException {
        String namespace = null;
        String array = null;
        String contentType = null;
        String xPayer = null;
                NonEmptyDomain response = api.getArrayNonEmptyDomain(namespace, array, contentType, xPayer);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * get non-empty domain from the array in json format
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getArrayNonEmptyDomainJsonTest() throws ApiException {
        String namespace = null;
        String array = null;
                Object response = api.getArrayNonEmptyDomainJson(namespace, array);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * get an sample set of data from the array
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getArraySampleDataTest() throws ApiException {
        String namespace = null;
        String array = null;
        BigDecimal samples = null;
                ArraySample response = api.getArraySampleData(namespace, array, samples);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get all sharing details of the array
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getArraySharingPoliciesTest() throws ApiException {
        String namespace = null;
        String array = null;
                List<ArraySharing> response = api.getArraySharingPolicies(namespace, array);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * get metadata on all arrays in a namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getArraysInNamespaceTest() throws ApiException {
        String namespace = null;
                List<ArrayInfo> response = api.getArraysInNamespace(namespace);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get fragment end_timestamp on an array, will search for the closest end_timestamp to the timestamp asked
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFragmentEndTimestampTest() throws ApiException {
        String namespace = null;
        String array = null;
        Integer endTimestamp = null;
                Integer response = api.getFragmentEndTimestamp(namespace, array, endTimestamp);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLastAccessedArraysTest() throws ApiException {
                List<LastAccessedArray> response = api.getLastAccessedArrays();
        // TODO: test validations
    }
    
    /**
     * 
     *
     * register an array at a specified URI registered to the given namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerArrayTest() throws ApiException {
        String namespace = null;
        String array = null;
        ArrayInfoUpdate arrayMetadata = null;
                ArrayInfo response = api.registerArray(namespace, array, arrayMetadata);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Share an array with a user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shareArrayTest() throws ApiException {
        String namespace = null;
        String array = null;
        ArraySharing arraySharing = null;
                api.shareArray(namespace, array, arraySharing);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * update metadata on an array
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateArrayMetadataTest() throws ApiException {
        String namespace = null;
        String array = null;
        ArrayInfoUpdate arrayMetadata = null;
                api.updateArrayMetadata(namespace, array, arrayMetadata);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * update metadata on an array
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateArrayMetadataCapnpTest() throws ApiException {
        String namespace = null;
        String array = null;
        ArrayMetadata arrayMetadataEntries = null;
                api.updateArrayMetadataCapnp(namespace, array, arrayMetadataEntries);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * vacuum an array at a specified URI
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vacuumArrayTest() throws ApiException {
        String namespace = null;
        String array = null;
        TileDBConfig tiledbConfig = null;
                api.vacuumArray(namespace, array, tiledbConfig);
        // TODO: test validations
    }
    
}
