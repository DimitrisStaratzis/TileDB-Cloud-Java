/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.api;

import io.tiledb.cloud.rest_api.ApiException;
import io.tiledb.cloud.rest_api.model.GroupBrowserData;
import io.tiledb.cloud.rest_api.model.GroupBrowserFilterData;
import io.tiledb.cloud.rest_api.model.GroupChanges;
import io.tiledb.cloud.rest_api.model.GroupContents;
import io.tiledb.cloud.rest_api.model.GroupContentsFilterData;
import io.tiledb.cloud.rest_api.model.GroupCreate;
import io.tiledb.cloud.rest_api.model.GroupInfo;
import io.tiledb.cloud.rest_api.model.GroupRegister;
import io.tiledb.cloud.rest_api.model.GroupSharing;
import io.tiledb.cloud.rest_api.model.GroupSharingRequest;
import io.tiledb.cloud.rest_api.model.GroupUpdate;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for GroupsApi
 */
@Ignore
public class GroupsApiTest {

    private final GroupsApi api = new GroupsApi();

    
    /**
     * 
     *
     * Changes the contents of the group by adding/removing members.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeGroupContentsTest() throws ApiException {
        String groupNamespace = null;
        String groupName = null;
        GroupChanges groupChanges = null;
                api.changeGroupContents(groupNamespace, groupName, groupChanges);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Creates a new group in the namespace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGroupTest() throws ApiException {
        String namespace = null;
        GroupCreate groupCreate = null;
                api.createGroup(namespace, groupCreate);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Deletes the group. The assets are not deleted nor are not relocated to any other group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupTest() throws ApiException {
        String groupNamespace = null;
        String groupName = null;
                api.deleteGroup(groupNamespace, groupName);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the the group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupTest() throws ApiException {
        String groupNamespace = null;
        String groupName = null;
                GroupInfo response = api.getGroup(groupNamespace, groupName);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the contents of the group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupContentsTest() throws ApiException {
        String groupNamespace = null;
        String groupName = null;
        Integer page = null;
        Integer perPage = null;
        String namespace = null;
        String search = null;
        String orderby = null;
        List<String> tag = null;
        List<String> excludeTag = null;
        List<String> memberType = null;
        List<String> excludeMemberType = null;
                GroupContents response = api.getGroupContents(groupNamespace, groupName, page, perPage, namespace, search, orderby, tag, excludeTag, memberType, excludeMemberType);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get all sharing details of the group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupSharingPoliciesTest() throws ApiException {
        String groupNamespace = null;
        String groupName = null;
                List<GroupSharing> response = api.getGroupSharingPolicies(groupNamespace, groupName);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Fetch data to initialize filters for the groups browser
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsBrowserOwnedFiltersGetTest() throws ApiException {
                GroupBrowserFilterData response = api.groupsBrowserOwnedFiltersGet();
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Fetch data to initialize filters for the groups browser
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsBrowserPublicFiltersGetTest() throws ApiException {
                GroupBrowserFilterData response = api.groupsBrowserPublicFiltersGet();
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Fetch data to initialize filters for the groups browser
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsBrowserSharedFiltersGetTest() throws ApiException {
                GroupBrowserFilterData response = api.groupsBrowserSharedFiltersGet();
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Fetch data to initialize filters for the group contents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupsGroupNamespaceGroupNameContentsFiltersGetTest() throws ApiException {
        String groupNamespace = null;
        String groupName = null;
                GroupContentsFilterData response = api.groupsGroupNamespaceGroupNameContentsFiltersGet(groupNamespace, groupName);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns one page of owned groups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOwnedGroupsTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        String search = null;
        String namespace = null;
        String orderby = null;
        String permissions = null;
        List<String> tag = null;
        List<String> excludeTag = null;
        Boolean flat = null;
        String parent = null;
                GroupBrowserData response = api.listOwnedGroups(page, perPage, search, namespace, orderby, permissions, tag, excludeTag, flat, parent);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns one page of public groups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPublicGroupsTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        String search = null;
        String namespace = null;
        String orderby = null;
        String permissions = null;
        List<String> tag = null;
        List<String> excludeTag = null;
        Boolean flat = null;
        String parent = null;
                GroupBrowserData response = api.listPublicGroups(page, perPage, search, namespace, orderby, permissions, tag, excludeTag, flat, parent);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns one page of shared groups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSharedGroupsTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        String search = null;
        String namespace = null;
        String orderby = null;
        String permissions = null;
        List<String> tag = null;
        List<String> excludeTag = null;
        Boolean flat = null;
        String parent = null;
                GroupBrowserData response = api.listSharedGroups(page, perPage, search, namespace, orderby, permissions, tag, excludeTag, flat, parent);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Registers an existing group in the namespace.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerGroupTest() throws ApiException {
        String namespace = null;
        String array = null;
        GroupRegister groupRegister = null;
                api.registerGroup(namespace, array, groupRegister);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Share a group with a namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shareGroupTest() throws ApiException {
        String groupNamespace = null;
        String groupName = null;
        GroupSharingRequest groupSharingRequest = null;
                api.shareGroup(groupNamespace, groupName, groupSharingRequest);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Changes attributes of the group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGroupTest() throws ApiException {
        String groupNamespace = null;
        String groupName = null;
        GroupUpdate groupUpdate = null;
                api.updateGroup(groupNamespace, groupName, groupUpdate);
        // TODO: test validations
    }
    
}
